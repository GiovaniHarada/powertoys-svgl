name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  PLUGIN_NAME: SVGL

jobs:
  build:
    strategy:
      matrix:
        platform: [x64, ARM64]
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read Version from Directory.Build.Props
        id: get-version
        shell: pwsh
        run: |
          [xml]$xml = Get-Content -Path "${{ github.workspace }}/Directory.Build.Props"
          echo "PLUGIN_VERSION=$($xml.Project.PropertyGroup.Version)" >> $env:GITHUB_ENV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build Project
        shell: pwsh
        run: dotnet build Community.PowerToys.Run.Plugin.SVGL.sln --configuration Release /p:Platform=${{ matrix.platform }} /p:EnableWindowsTargeting=true

      - name: Prepare Artifact
        shell: pwsh
        run: |
          # Remove unwanted files
          Remove-Item -Path Community.PowerToys.Run.Plugin.SVGL\bin\* -Recurse -Include *.xml, *pdb, PowerToys.*, Wox.*
          # Rename the Release directory to the plugin name
          Rename-Item -Path "Community.PowerToys.Run.Plugin.SVGL\bin\${{ matrix.platform }}\Release" -NewName $env:PLUGIN_NAME

      - name: Prepare Artifact
        shell: pwsh
        run: |
          # Remove unwanted files
          Remove-Item -Path Community.PowerToys.Run.Plugin.SVGL\bin\* -Recurse -Include *.xml, *pdb, PowerToys.*, Wox.*
          # Rename the Release directory to the plugin name
          Rename-Item -Path "Community.PowerToys.Run.Plugin.SVGL\bin\${{ matrix.platform }}\Release" -NewName $env:PLUGIN_NAME
          # Create zip file
          Compress-Archive -Path "Community.PowerToys.Run.Plugin.SVGL\bin\${{ matrix.platform }}\$env:PLUGIN_NAME" -DestinationPath "Community.PowerToys.Run.Plugin.SVGL\bin\${{ matrix.platform }}\$env:PLUGIN_NAME-${{ env.PLUGIN_VERSION }}-${{ matrix.platform }}.zip"

      - name: Upload to Release
        shell: pwsh
        run: |
          $versionTag = "v${{ env.PLUGIN_VERSION }}"
          $zipPath = "Community.PowerToys.Run.Plugin.SVGL\bin\${{ matrix.platform }}\$env:PLUGIN_NAME-${{ env.PLUGIN_VERSION }}-${{ matrix.platform }}.zip"
          gh release upload $versionTag $zipPath --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
          
#      - name: Upload release binaries
#        uses: alexellis/upload-assets@0.4.0
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#            asset_paths: "Community.PowerToys.Run.Plugin.SVGL/bin/${{ matrix.platform }}/*"
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.PLUGIN_NAME }}-${{ env.PLUGIN_VERSION }}-${{ matrix.platform }}
#          path: "Community.PowerToys.Run.Plugin.SVGL/bin/${{ matrix.platform }}/*"
#
#      - name: Ensure Release Exists
#        shell: pwsh
#        run: |
#          $versionTag = "v${{ env.PLUGIN_VERSION }}"
#          Write-Output "Computed version tag: $versionTag"
#          try {
#              $release = gh release view $versionTag --json tagName --jq '.tagName'
#          }
#          catch {
#              $release = $null
#          }
#          if (-not $release) {
#              Write-Output "Release $versionTag does not exist. Creating it..."
#              gh release create $versionTag --title "Release $versionTag" --notes "Automated release created via CI."
#          }
#          else {
#              Write-Output "Release $versionTag already exists."
#          }
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Download Artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.PLUGIN_NAME }}-${{ env.PLUGIN_VERSION }}-${{ matrix.platform }}
#          path: ${{ github.workspace }}/downloaded-artifacts
#
#      - name: Upload Artifacts to GitHub Release
#        shell: pwsh
#        run: |
#          $versionTag = "v${{ env.PLUGIN_VERSION }}"
#          # Get all zip files from the downloaded artifacts folder (these should be the complete artifacts)
#          $files = Get-ChildItem -Path ${{ github.workspace }}/downloaded-artifacts -Filter "*.zip" -File -Recurse
#          foreach ($file in $files) {
#              Write-Output "Uploading $($file.FullName) to release $versionTag"
#              gh release upload $versionTag $file.FullName --clobber
#          }
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}