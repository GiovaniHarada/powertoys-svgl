name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

env:
  PLUGIN_NAME: SVGL

permissions:
  contents: write


jobs:
  build:
    strategy:
      matrix:
        platform: [x64, ARM64]

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug Build Props File Path
        run: pwd

      - name: Read Version
        run: |
          [xml]$xml = Get-Content -Path "${{ github.workspace }}/Directory.Build.Props"
          echo "PLUGIN_VERSION=$($xml.Project.PropertyGroup.Version)" >> $env:GITHUB_ENV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build
        run: dotnet build Community.PowerToys.Run.Plugin.SVGL.sln --configuration Release /p:Platform=${{matrix.platform}} /p:EnableWindowsTargeting=true

      - name: Prepare Artifact
        run: |
          Remove-Item -Path Community.PowerToys.Run.Plugin.SVGL\bin\* -Recurse -Include *.xml, *pdb, PowerToys.*, Wox.*
          Rename-Item -Path Community.PowerToys.Run.Plugin.SVGL\bin\${{matrix.platform}}\Release -NewName $env:PLUGIN_NAME

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.PLUGIN_NAME}}-${{env.PLUGIN_VERSION}}-${{matrix.platform}}
          path: "Community.PowerToys.Run.Plugin.SVGL/bin/${{matrix.platform}}/*"

  release:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: Ensure Release Exists
        shell: pwsh
        run: |
          $versionTag = "v${{ env.PLUGIN_VERSION }}"
          try {
            $release = gh release view $versionTag --json tagName --jq '.tagName'
          }
          catch {
            $release = $null
          }
          if (-not $release) {
            Write-Output "Release $versionTag does not exist. Creating it..."
            gh release create $versionTag --title "Release $versionTag" --notes "Automated release created via CI."
          }
          else {
            Write-Output "Release $versionTag already exists."
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Upload Artifacts to Release
        shell: pwsh
        run: |
          $versionTag = "v${{ env.PLUGIN_VERSION }}"
          $files = Get-ChildItem -Path downloaded-artifacts -File -Recurse
          foreach ($file in $files) {
              Write-Output "Uploading $($file.FullName) to release $versionTag"
              gh release upload $versionTag $file.FullName --clobber
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Download Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.PLUGIN_NAME }}-${{ env.PLUGIN_VERSION }}-${{ matrix.platform }}
#          path: downloaded-artifact
#
#      - name: Upload Artifact's to GitHub Release
#        shell: pwsh
#        run: |
#          $files = Get-ChildItem -Path downloaded-artifact -File -Recurse
#          foreach ($file in $files) {
#            gh release upload "v${{ env.PLUGIN_VERSION }}" $file.FullName --clobber
#          }
#        env:
#          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}